// Prisma schema for Nexus API (SQLite)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum CardStatus {
  TODO
  DOING
  DONE
  ARCHIVED
}

enum Provider {
  GOOGLE
  OUTLOOK
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  passwordHash        String
  failedAttempts      Int                  @default(0)
  lockedUntil         DateTime?
  name                String?
  projects            Project[]
  refreshTokens       RefreshToken[]
  calendarIntegration CalendarIntegration?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Project {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id        String          @id @default(cuid())
  title     String
  position  Int
  status    CardStatus
  projectId String
  project   Project         @relation(fields: [projectId], references: [id])
  events    CalendarEvent[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@unique([projectId, status, position])
}

model CalendarEvent {
  id        String    @id @default(cuid())
  title     String
  provider  Provider?
  startsAt  DateTime
  endsAt    DateTime?
  cardId    String
  card      Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CalendarIntegration {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          Provider
  accountEmail      String
  defaultCalendarId String
  timezone          String
  status            String   @default("Synced")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId])
}

model RefreshToken {
  id        String    @id @default(cuid())
  tokenHash String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
}

model PasswordReset {
  id        String    @id @default(cuid())
  email     String
  tokenHash String    @unique
  used      Boolean   @default(false)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
}
